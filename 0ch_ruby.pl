#============================================================================================================
#
#	拡張機能 - 文字にルビを！
#	0ch_ruby.pl
#
#============================================================================================================
package ZPL_ruby;



#------------------------------------------------------------------------------------------------------------
#	拡張機能名称取得
#------------------------------------------------------------------------------------------------------------
sub getName
{
	return '<ruby>文字<rp>(</rp><rt>もじ</rt><rp>)</rp></ruby>に<ruby>ルビ<rp>(</rp><rt>よみがな</rt><rp>)</rp></ruby>を！';
}

#------------------------------------------------------------------------------------------------------------
#	拡張機能説明取得
#------------------------------------------------------------------------------------------------------------
sub getExplanation
{
	my $description = 'この<ruby>プラグイン<rp>(</rp><rt>拡張機能</rt><rp>)</rp></ruby>を<ruby>導入<rp>(</rp><rt>どうにゅう</rt><rp>)</rp></ruby>した<ruby>状態<rp>(</rp><rt>じょうたい</rt><rp>)</rp></ruby>で$[ruby|ruby>漢字<rp>(</rp><rt>かんじ</rt><rp>)</rp></ruby>|<ruby>ルビ<rp>(</rp><rt>よみがな</rt><rp>)</rp></ruby>]と<ruby>本文<rp>(</rp><rt>ほんぶん</rt><rp>)</rp></ruby>に<ruby>書<rp>(</rp><rt>か</rt><rp>)</rp></ruby>くと<ruby>漢字<rp>(</rp><rt>かんじ</rt><rp>)</rp></ruby>に<ruby>ルビ<rp>(</rp><rt>よみがな</rt><rp>)</rp></ruby>をつけることができます。';
	$description = $description.'<br><ruby>非対応<rp>(</rp><rt>ひたいおう</rt><rp>)</rp></ruby>ブラウザでも「漢字(かんじ)」と<ruby>表示<rp>(</rp><rt>ひょうじ</rt><rp>)</rp></ruby>されます。';
	return $description;
}

#------------------------------------------------------------------------------------------------------------
#	拡張機能タイプ取得
#------------------------------------------------------------------------------------------------------------
sub getType
{
	return (1|2);
}

#------------------------------------------------------------------------------------------------------------
#	設定リスト取得 (0ch+ Only)
#------------------------------------------------------------------------------------------------------------
sub getConfig
{
	return {};
}

#------------------------------------------------------------------------------------------------------------
#	拡張機能実行インタフェイス
#------------------------------------------------------------------------------------------------------------
sub execute
{
	my $this = shift;
	my ($Sys, $Form, $type) = @_;
	
	# 0ch本家では実行しない
	return 0 if (!$this->{'is0ch+'});
	
	my $MESSAGE = $Form->Get('MESSAGE');

	# $[ruby|(漢字)|(ルビ)] 処理部
	$MESSAGE =~ s{\$\[ruby\|(.+?)\|(.+?)\]}{do {
		my $target = $1;			# ルビ対象
		my $ruby = $2;				# ルビ
		"<ruby>$target<rp>(</rp><rt>$ruby</rt><rp>)</rp></ruby>";							# 置き換え！
		# $&;						# 置換しない場合はこれをコメント解除
	}}egi;
	
	$Form->Set('MESSAGE', $MESSAGE);
	return 0;
}

#------------------------------------------------------------------------------------------------------------
#	なんちゃってbbs.cgiエラーページ表示
#------------------------------------------------------------------------------------------------------------
sub PrintBBSError
{
	my ($Sys, $err) = @_;
	
	require './module/orald.pl';
	
	my $CGI = $Sys->Get('MainCGI');
	my $Page = $CGI->{'PAGE'};
	
	my $Error = ORALD->new;
	$Error->Load($Sys);
	$Error->Print($CGI, $Page, $err, $Sys->Get('AGENT'));
	
	$Page->Flush('', 0, 0);
	
	exit($err);
}



#------------------------------------------------------------------------------------------------------------
#	コンストラクタ
#------------------------------------------------------------------------------------------------------------
sub new
{
	my $class = shift;
	my ($Config) = @_;
	
	my $this = {};
	bless $this, $class;
	
	if (defined $Config) {
		$this->{'PLUGINCONF'} = $Config;
		$this->{'is0ch+'} = 1;
	}
	else {
		$this->{'CONFIG'} = $class->getConfig();
		$this->{'is0ch+'} = 0;
	}
	
	return $this;
}

#------------------------------------------------------------------------------------------------------------
#	設定値取得 (0ch+ Only)
#------------------------------------------------------------------------------------------------------------
sub GetConf
{
	my $this = shift;
	my ($key) = @_;
	if ($this->{'is0ch+'}) {
		return $this->{'PLUGINCONF'}->GetConfig($key);
	}
	elsif (defined $this->{'CONFIG'}->{$key}) {
		return $this->{'CONFIG'}->{$key}->{'default'};
	}
}

#------------------------------------------------------------------------------------------------------------
#	設定値設定 (0ch+ Only)
#------------------------------------------------------------------------------------------------------------
sub SetConf
{
	my $this = shift;
	my ($key, $val) = @_;
	if ($this->{'is0ch+'}) {
		$this->{'PLUGINCONF'}->SetConfig($key, $val);
	}
	elsif (defined $this->{'CONFIG'}->{$key}) {
		$this->{'CONFIG'}->{$key}->{'default'} = $val;
	}
	else {
		$this->{'CONFIG'}->{$key} = { 'default' => $val };
	}
}

#============================================================================================================
#	Module END
#============================================================================================================
1;